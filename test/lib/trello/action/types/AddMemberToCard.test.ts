// This file was auto-generated by codegen/actionTest.ts. Do not edit.

import { expect, describe, test } from "vitest";

import AddMemberToCard from "@/src/lib/trello/action/types/AddMemberToCard";

import { findActionFor } from "@/src/lib/trello/action/parse";
import { areJSONObjectsEqual, getPayloadsExceptFor } from "./common";
import { ActionWithData } from "@/src/lib/trello/action/types/base";

import * as fetchDataMocks from "./fetchDataMocks";

import payload from "./_payloads/AddMemberToCard.json";
import message from "./_messages/AddMemberToCard.json";

const messageJSONExists = true;

describe("AddMemberToCard", () => {
  describe("Parsing", () => {
    test("Empty payload", () => {
      const res = AddMemberToCard.from({});
      expect(res.success, "Parsing empty payload should fail").toBeFalsy();
    });

    test("Direct", () => {
      const res = AddMemberToCard.from(payload);
      expect(res.success, "Pre-made JSON payload should parse").toBeTruthy();
    });

    test("Find type", () => {
      const res = findActionFor(payload);
      expect(
        res,
        "Pre-made JSON payload should resolve to a correct action type"
      ).toBeInstanceOf(AddMemberToCard);
    });

    test("Wrong payloads", () => {
      for (const payload of getPayloadsExceptFor("AddMemberToCard")) {
        const res = AddMemberToCard.from(payload);
        expect(res.success, "Parsing wrong payload should fail").toBeFalsy();
      }
    });
  });

  test.runIf(messageJSONExists)("Build message", async () => {
    const res = AddMemberToCard.from(payload);
    const action = res.action! as (ActionWithData & AddMemberToCard);

    await fetchDataMocks.callFor(action);

    const builtMessage = action.buildMessage({});

    expect(
      builtMessage?.embeds?.length,
      "Messsage should be an embed"
    ).toBeTruthy();

    const embed = builtMessage!.embeds![0];
    embed.setTimestamp(null); /* Ensure no timestamp value present. */

    const cleanEmbed = JSON.parse(JSON.stringify(embed.toJSON()));

    expect(
      areJSONObjectsEqual(cleanEmbed, message),
      "Built message content does not match the expected one"
    ).toBeTruthy();
  });
});
