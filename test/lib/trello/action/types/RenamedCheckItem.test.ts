// This file was auto-generated by codegen/actionTest.ts. Do not edit.

import { expect, describe, test } from "vitest";

import RenamedCheckItem from "@/src/lib/trello/action/types/RenamedCheckItem";
import { findActionFor } from "@/src/lib/trello/action/parse";
import { areJSONObjectsEqual, getPayloadsExceptFor } from "./common";

import payload from "./_payloads/RenamedCheckItem.json";
import message from "./_messages/RenamedCheckItem.json";

describe("RenamedCheckItem", () => {
  test("parse empty payload", () => {
    const res = RenamedCheckItem.from({});
    expect(res.success, "Parsing empty payload should fail").toBeFalsy();
  });

  test("parse", () => {
    const res = RenamedCheckItem.from(payload);
    expect(res.success, "Pre-made JSON payload should parse").toBeTruthy();
  });

  test("build message", () => {
    const res = RenamedCheckItem.from(payload);
    const builtMessage = res.action!.buildMessage({});

    expect(
      builtMessage?.embeds?.length,
      "Messsage should be an embed"
    ).toBeTruthy();

    const embed = builtMessage!.embeds![0];
    embed.setTimestamp(null); /* Ensure no timestamp value present. */

    const cleanEmbed = JSON.parse(JSON.stringify(embed.toJSON()));

    expect(
      areJSONObjectsEqual(cleanEmbed, message),
      "Built message content does not match the expected one"
    ).toBeTruthy();
  });

  test("find and parse", () => {
    const res = findActionFor(payload);
    expect(
      res,
      "Pre-made JSON payload should resolve to a correct action type"
    ).toBeInstanceOf(RenamedCheckItem);
  });

  test("parse wrong payloads", () => {
    for (const payload of getPayloadsExceptFor("RenamedCheckItem")) {
      const res = RenamedCheckItem.from(payload);
      expect(res.success, "Parsing wrong payload should fail").toBeFalsy();
    }
  });
});
